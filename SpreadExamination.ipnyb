{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11614903,"sourceType":"datasetVersion","datasetId":7285856}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:51:56.850048Z","iopub.execute_input":"2025-04-29T18:51:56.850418Z","iopub.status.idle":"2025-04-29T18:51:56.857454Z","shell.execute_reply.started":"2025-04-29T18:51:56.850394Z","shell.execute_reply":"2025-04-29T18:51:56.855825Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"# DAILY EXAMINATION","metadata":{}},{"cell_type":"code","source":"import datetime\nfrom datetime import datetime\nimport statsmodels\nimport scipy\nimport matplotlib.pyplot\n\nfile_path = '/kaggle/input/spreadanalysis42920252/David WTI Spread Analysis.xlsx'\n\ndaily_sheet_name = 'Daily Data'\n\ndaily_df = pd.read_excel(file_path, daily_sheet_name, skiprows=5, header = 0, usecols = 'B:AI')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:24.452822Z","iopub.execute_input":"2025-04-29T18:52:24.453164Z","iopub.status.idle":"2025-04-29T18:52:26.281901Z","shell.execute_reply.started":"2025-04-29T18:52:24.453139Z","shell.execute_reply":"2025-04-29T18:52:26.280758Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"import re\nfrom itertools import combinations\n\n# --- 1. pick out the columns that look like \"%CL n!\"\ncl_cols = [c for c in daily_df.columns if re.match(r'%CL \\d+!', c)]\n\n# --- 2. sort them numerically so CL 1! < CL 2! < … < CL 24!\ncl_cols = sorted(cl_cols, key=lambda c: int(re.search(r'\\d+', c).group()))\n\n# --- 3. build every (near, far) pair and write the spread\nfor near, far in combinations(cl_cols, 2):          # all pairs where near < far\n    spread_name = f'{near} - {far}'                 # e.g. \"%CL 1! - %CL 4!\"\n    daily_df[spread_name] = daily_df[near] - daily_df[far]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:29.549988Z","iopub.execute_input":"2025-04-29T18:52:29.550302Z","iopub.status.idle":"2025-04-29T18:52:29.692536Z","shell.execute_reply.started":"2025-04-29T18:52:29.550279Z","shell.execute_reply":"2025-04-29T18:52:29.691550Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"daily_df.drop(columns = {'%CL 1! - %CL 2!', \"CL Settles / Fwd Proj (M1-M2)\",\"CL Settles / Fwd Proj (M2-M8)\", \"Filter Range\",'Prompt TM'}, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:37.818781Z","iopub.execute_input":"2025-04-29T18:52:37.819123Z","iopub.status.idle":"2025-04-29T18:52:37.841788Z","shell.execute_reply.started":"2025-04-29T18:52:37.819096Z","shell.execute_reply":"2025-04-29T18:52:37.840582Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"daily_df['Prompt Spread'] = daily_df['%CL 1!'] - daily_df['%CL 2!']\n\ndaily_df['Dec Red'] = daily_df['CL Z25'] - daily_df['CL Z26']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:38.612443Z","iopub.execute_input":"2025-04-29T18:52:38.612749Z","iopub.status.idle":"2025-04-29T18:52:38.621548Z","shell.execute_reply.started":"2025-04-29T18:52:38.612730Z","shell.execute_reply":"2025-04-29T18:52:38.620427Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/2327965560.py:1: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df['Prompt Spread'] = daily_df['%CL 1!'] - daily_df['%CL 2!']\n/tmp/ipykernel_31/2327965560.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df['Dec Red'] = daily_df['CL Z25'] - daily_df['CL Z26']\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"import re\n\n# ------------------------------------------------------------------\n# 1) columns that should NEVER be dropped\nmeta_cols = [\"Date (Day)\",\n             \"Cushing Stocks (Mbbl)\",\n             \"Prompt Spread\",\n             \"Dec Red\"]\n\n# ------------------------------------------------------------------\n# 2) helper → extract all month numbers embedded in a column name\nmonth_re = re.compile(r'%CL\\s+(\\d+)!')       # captures the digits after %CL\n\ndef months_in_col(col: str):\n    \"\"\"Return a list of ints for every %CL n! token in the column name.\"\"\"\n    return [int(m) for m in month_re.findall(col)]\n\n# ------------------------------------------------------------------\n# 3) build the drop list\ndrop_cols = []\n\nfor col in daily_df.columns:\n    if col in meta_cols:                         # keep meta columns\n        continue\n\n    months = months_in_col(col)                  # outrights ⇒ [n], spreads ⇒ [n, m]\n\n    # drop if ANY leg is beyond the 12-month mark\n    if any(m > 12 for m in months):\n        drop_cols.append(col)\n\n# ------------------------------------------------------------------\n# 4) perform the drop\ndaily_df = daily_df.drop(columns=drop_cols)\n\n# Optional sanity-check\nprint(f\"Dropped {len(drop_cols)} columns → {daily_df.shape[1]} columns remain.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:41.304811Z","iopub.execute_input":"2025-04-29T18:52:41.305160Z","iopub.status.idle":"2025-04-29T18:52:41.320184Z","shell.execute_reply.started":"2025-04-29T18:52:41.305132Z","shell.execute_reply":"2025-04-29T18:52:41.319316Z"}},"outputs":[{"name":"stdout","text":"Dropped 222 columns → 85 columns remain.\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# ------------------------------------------------------------------\n# Ensure the Date column is the index\ndaily_df['Date (Day)'] = pd.to_datetime(daily_df['Date (Day)'])\ndaily_df = daily_df.set_index('Date (Day)').sort_index()\n\ncush = daily_df['Cushing Stocks (Mbbl)'].dropna()      # Friday-only series\n\n# ---------- 1️⃣  Release-timed series -----------------------------------------\ndef next_wednesday(d):\n    \"\"\"Return the first Wednesday *after* date d.\"\"\"\n    offset = (2 - d.weekday() + 7) % 7        # 2 = Wed\n    if offset == 0:                       # already Wed → push to next week\n        offset = 7\n    return d + pd.Timedelta(days=offset)\n\n# move each Friday obs to the following Wednesday\nrelease_idx   = cush.index.map(next_wednesday)\ncush_release  = cush.copy()\ncush_release.index = release_idx\n\ndaily_df['Cushing Stocks (Release)'] = (\n    cush_release.reindex(daily_df.index)      # align to full Daily index\n               .ffill()                       # carry forward until next Wed\n)\n\n# ---------- 2️⃣  Interpolated physical series ---------------------------------\n#  • re-index to daily calendar, interpolate, then b/ffill book-ends\ncush_interp = (\n    cush.reindex(daily_df.index)              # Fridays + NaNs in between\n        .interpolate(method='time')           # linear in calendar time\n        .ffill()                              # carry last value forward\n        .bfill()                              # backfill before first obs\n)\ndaily_df['Cushing Stocks (Interp)'] = cush_interp\n\n# ───────────────────────────────────────────────────────────────────\n# OPTIONAL: also compute day-to-day deltas / momentum on the new cols\ndaily_df['Delta Cushing Release'] = daily_df['Cushing Stocks (Release)'].diff()\ndaily_df['Delta Cushing Interp']  = daily_df['Cushing Stocks (Interp)'].diff()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:44.469515Z","iopub.execute_input":"2025-04-29T18:52:44.469825Z","iopub.status.idle":"2025-04-29T18:52:44.497934Z","shell.execute_reply.started":"2025-04-29T18:52:44.469800Z","shell.execute_reply":"2025-04-29T18:52:44.497010Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"%pip install pandas_market_calendars","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:30:43.838916Z","iopub.execute_input":"2025-04-29T18:30:43.839279Z","iopub.status.idle":"2025-04-29T18:30:50.381401Z","shell.execute_reply.started":"2025-04-29T18:30:43.839252Z","shell.execute_reply":"2025-04-29T18:30:50.379851Z"}},"outputs":[{"name":"stdout","text":"Collecting pandas_market_calendars\n  Downloading pandas_market_calendars-5.1.0-py3-none-any.whl.metadata (9.6 kB)\nRequirement already satisfied: pandas>=1.1 in /usr/local/lib/python3.11/dist-packages (from pandas_market_calendars) (2.2.3)\nRequirement already satisfied: tzdata in /usr/local/lib/python3.11/dist-packages (from pandas_market_calendars) (2025.2)\nRequirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from pandas_market_calendars) (2.9.0.post0)\nCollecting exchange-calendars>=3.3 (from pandas_market_calendars)\n  Downloading exchange_calendars-4.10-py3-none-any.whl.metadata (37 kB)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from exchange-calendars>=3.3->pandas_market_calendars) (1.26.4)\nCollecting pyluach (from exchange-calendars>=3.3->pandas_market_calendars)\n  Downloading pyluach-2.2.0-py3-none-any.whl.metadata (4.3 kB)\nRequirement already satisfied: toolz in /usr/local/lib/python3.11/dist-packages (from exchange-calendars>=3.3->pandas_market_calendars) (1.0.0)\nCollecting korean_lunar_calendar (from exchange-calendars>=3.3->pandas_market_calendars)\n  Downloading korean_lunar_calendar-0.3.1-py3-none-any.whl.metadata (2.8 kB)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1->pandas_market_calendars) (2025.2)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil->pandas_market_calendars) (1.17.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2024.2.0)\nDownloading pandas_market_calendars-5.1.0-py3-none-any.whl (123 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m123.9/123.9 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading exchange_calendars-4.10-py3-none-any.whl (198 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m198.4/198.4 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading korean_lunar_calendar-0.3.1-py3-none-any.whl (9.0 kB)\nDownloading pyluach-2.2.0-py3-none-any.whl (25 kB)\nInstalling collected packages: korean_lunar_calendar, pyluach, exchange-calendars, pandas_market_calendars\nSuccessfully installed exchange-calendars-4.10 korean_lunar_calendar-0.3.1 pandas_market_calendars-5.1.0 pyluach-2.2.0\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"import pandas as pd\nimport pandas_market_calendars as mcal\n\n# ───────────────────────────────────────────────────────────\n\ndaily_df.reset_index(inplace=True)\n# 0) Basic set-up\ndaily_df['Date (Day)'] = pd.to_datetime(daily_df['Date (Day)'])\ndaily_df = daily_df.set_index('Date (Day)').sort_index()\n\nmeta = ['Prompt TM',\n        'Cushing Stocks (Mbbl)']                       # keep these as-is\n\nprice_cols = daily_df.columns.difference(meta)\n\n# ───────────────────────────────────────────────────────────\n# 1) Drop rows where the *front-month* is zero\ndaily_df = daily_df[daily_df['%CL 1!'] != 0]\n\n# ───────────────────────────────────────────────────────────\n# 2) Build an index that includes every DAY (weekends + holidays)\nfull_idx = pd.date_range(daily_df.index.min(),\n                         daily_df.index.max(),\n                         freq='D')\n\n# • If you prefer *only trading days*:\n# cal = mcal.get_calendar('NYMEX')\n# full_idx = cal.schedule(full_idx[0].date(), full_idx[-1].date()).index\n\ndaily_df = daily_df.reindex(full_idx)\n\n# ───────────────────────────────────────────────────────────\n# 3) Forward-fill *price_cols* only\ndaily_df[price_cols] = daily_df[price_cols].ffill()\n\n# Meta columns—fill as you wish (often ffill makes sense for Cushing stocks)\ndaily_df['Cushing Stocks (Mbbl)'] = daily_df['Cushing Stocks (Mbbl)'].ffill()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:52.334091Z","iopub.execute_input":"2025-04-29T18:52:52.334510Z","iopub.status.idle":"2025-04-29T18:52:52.374635Z","shell.execute_reply.started":"2025-04-29T18:52:52.334485Z","shell.execute_reply":"2025-04-29T18:52:52.373589Z"}},"outputs":[],"execution_count":20},{"cell_type":"markdown","source":"# WEEKLY EXAMINATION","metadata":{}},{"cell_type":"code","source":"import datetime\nfrom datetime import datetime\nimport statsmodels\nimport scipy\nimport matplotlib.pyplot\n\nfile_path = '/kaggle/input/spreadanalysis42920252/David WTI Spread Analysis.xlsx'\n\nweekly_sheet_name = 'Weekly Data'\n\nweekly_df = pd.read_excel(file_path, weekly_sheet_name, skiprows=5, header = 0, usecols = 'B:AH')\n\nimport re\nfrom itertools import combinations\n\n# --- 1. pick out the columns that look like \"%CL n!\"\ncl_weekly_cols = [c for c in weekly_df.columns if re.match(r'%CL \\d+!', c)]\n\n# --- 2. sort them numerically so CL 1! < CL 2! < … < CL 24!\ncl_weekly_cols = sorted(cl_weekly_cols, key=lambda c: int(re.search(r'\\d+', c).group()))\n\n# --- 3. build every (near, far) pair and write the spread\nfor near, far in combinations(cl_weekly_cols, 2):          # all pairs where near < far\n    spread_name = f'{near} - {far}'                 # e.g. \"%CL 1! - %CL 4!\"\n    weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n\nweekly_df.drop(columns = {'SBM Stocks (Mbbl)','%CL 1! - %CL 2!', \"CL Settles / Fwd Proj (M1-M2)\",\"CL Settles / Fwd Proj (M2-M8)\", \"Filter Range\",'Prompt TM'}, inplace=True)\n\nweekly_df['Prompt Spread'] = weekly_df['%CL 1!'] - weekly_df['%CL 2!']\n\nweekly_df['Dec Red'] = weekly_df['CL Z25'] - weekly_df['CL Z26']\n\n# ------------------------------------------------------------------\n# 1) columns that should NEVER be dropped\nmeta_cols = [\"Date (Week)\",\n             \"Cushing Stocks (Mbbl)\",\n             \"Prompt Spread\",\n             \"Dec Red\"]\n\n# ------------------------------------------------------------------\n# 2) helper → extract all month numbers embedded in a column name\nmonth_re = re.compile(r'%CL\\s+(\\d+)!')       # captures the digits after %CL\n\ndef months_in_col(col: str):\n    \"\"\"Return a list of ints for every %CL n! token in the column name.\"\"\"\n    return [int(m) for m in month_re.findall(col)]\n\n# ------------------------------------------------------------------\n# 3) build the drop list\ndrop_cols = []\n\nfor col in weekly_df.columns:\n    if col in meta_cols:                         # keep meta columns\n        continue\n\n    months = months_in_col(col)                  # outrights ⇒ [n], spreads ⇒ [n, m]\n\n    # drop if ANY leg is beyond the 12-month mark\n    if any(m > 12 for m in months):\n        drop_cols.append(col)\n\n# ------------------------------------------------------------------\n# 4) perform the drop\nweekly_df = weekly_df.drop(columns=drop_cols)\n\n# Optional sanity-check\nprint(f\"Dropped {len(drop_cols)} columns → {weekly_df.shape[1]} columns remain.\")\n\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:55:09.040936Z","iopub.execute_input":"2025-04-29T18:55:09.041335Z","iopub.status.idle":"2025-04-29T18:55:09.544781Z","shell.execute_reply.started":"2025-04-29T18:55:09.041304Z","shell.execute_reply":"2025-04-29T18:55:09.543591Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/118494859.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}