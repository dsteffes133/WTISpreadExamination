{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11614903,"sourceType":"datasetVersion","datasetId":7285856}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:51:56.850048Z","iopub.execute_input":"2025-04-29T18:51:56.850418Z","iopub.status.idle":"2025-04-29T18:51:56.857454Z","shell.execute_reply.started":"2025-04-29T18:51:56.850394Z","shell.execute_reply":"2025-04-29T18:51:56.855825Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"# DAILY EXAMINATION","metadata":{}},{"cell_type":"code","source":"import datetime\nfrom datetime import datetime\nimport statsmodels\nimport scipy\nimport matplotlib.pyplot\n\nfile_path = '/kaggle/input/spreadanalysis42920252/David WTI Spread Analysis.xlsx'\n\ndaily_sheet_name = 'Daily Data'\n\ndaily_df = pd.read_excel(file_path, daily_sheet_name, skiprows=5, header = 0, usecols = 'B:AI')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:24.452822Z","iopub.execute_input":"2025-04-29T18:52:24.453164Z","iopub.status.idle":"2025-04-29T18:52:26.281901Z","shell.execute_reply.started":"2025-04-29T18:52:24.453139Z","shell.execute_reply":"2025-04-29T18:52:26.280758Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"import re\nfrom itertools import combinations\n\n# --- 1. pick out the columns that look like \"%CL n!\"\ncl_cols = [c for c in daily_df.columns if re.match(r'%CL \\d+!', c)]\n\n# --- 2. sort them numerically so CL 1! < CL 2! < … < CL 24!\ncl_cols = sorted(cl_cols, key=lambda c: int(re.search(r'\\d+', c).group()))\n\n# --- 3. build every (near, far) pair and write the spread\nfor near, far in combinations(cl_cols, 2):          # all pairs where near < far\n    spread_name = f'{near} - {far}'                 # e.g. \"%CL 1! - %CL 4!\"\n    daily_df[spread_name] = daily_df[near] - daily_df[far]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:29.549988Z","iopub.execute_input":"2025-04-29T18:52:29.550302Z","iopub.status.idle":"2025-04-29T18:52:29.692536Z","shell.execute_reply.started":"2025-04-29T18:52:29.550279Z","shell.execute_reply":"2025-04-29T18:52:29.691550Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n/tmp/ipykernel_31/1252700506.py:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df[spread_name] = daily_df[near] - daily_df[far]\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"daily_df.drop(columns = {'%CL 1! - %CL 2!', \"CL Settles / Fwd Proj (M1-M2)\",\"CL Settles / Fwd Proj (M2-M8)\", \"Filter Range\",'Prompt TM'}, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:37.818781Z","iopub.execute_input":"2025-04-29T18:52:37.819123Z","iopub.status.idle":"2025-04-29T18:52:37.841788Z","shell.execute_reply.started":"2025-04-29T18:52:37.819096Z","shell.execute_reply":"2025-04-29T18:52:37.840582Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"daily_df['Prompt Spread'] = daily_df['%CL 1!'] - daily_df['%CL 2!']\n\ndaily_df['Dec Red'] = daily_df['CL Z25'] - daily_df['CL Z26']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:38.612443Z","iopub.execute_input":"2025-04-29T18:52:38.612749Z","iopub.status.idle":"2025-04-29T18:52:38.621548Z","shell.execute_reply.started":"2025-04-29T18:52:38.612730Z","shell.execute_reply":"2025-04-29T18:52:38.620427Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/2327965560.py:1: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df['Prompt Spread'] = daily_df['%CL 1!'] - daily_df['%CL 2!']\n/tmp/ipykernel_31/2327965560.py:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  daily_df['Dec Red'] = daily_df['CL Z25'] - daily_df['CL Z26']\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"import re\n\n# ------------------------------------------------------------------\n# 1) columns that should NEVER be dropped\nmeta_cols = [\"Date (Day)\",\n             \"Cushing Stocks (Mbbl)\",\n             \"Prompt Spread\",\n             \"Dec Red\"]\n\n# ------------------------------------------------------------------\n# 2) helper → extract all month numbers embedded in a column name\nmonth_re = re.compile(r'%CL\\s+(\\d+)!')       # captures the digits after %CL\n\ndef months_in_col(col: str):\n    \"\"\"Return a list of ints for every %CL n! token in the column name.\"\"\"\n    return [int(m) for m in month_re.findall(col)]\n\n# ------------------------------------------------------------------\n# 3) build the drop list\ndrop_cols = []\n\nfor col in daily_df.columns:\n    if col in meta_cols:                         # keep meta columns\n        continue\n\n    months = months_in_col(col)                  # outrights ⇒ [n], spreads ⇒ [n, m]\n\n    # drop if ANY leg is beyond the 12-month mark\n    if any(m > 12 for m in months):\n        drop_cols.append(col)\n\n# ------------------------------------------------------------------\n# 4) perform the drop\ndaily_df = daily_df.drop(columns=drop_cols)\n\n# Optional sanity-check\nprint(f\"Dropped {len(drop_cols)} columns → {daily_df.shape[1]} columns remain.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:41.304811Z","iopub.execute_input":"2025-04-29T18:52:41.305160Z","iopub.status.idle":"2025-04-29T18:52:41.320184Z","shell.execute_reply.started":"2025-04-29T18:52:41.305132Z","shell.execute_reply":"2025-04-29T18:52:41.319316Z"}},"outputs":[{"name":"stdout","text":"Dropped 222 columns → 85 columns remain.\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# ------------------------------------------------------------------\n# Ensure the Date column is the index\ndaily_df['Date (Day)'] = pd.to_datetime(daily_df['Date (Day)'])\ndaily_df = daily_df.set_index('Date (Day)').sort_index()\n\ncush = daily_df['Cushing Stocks (Mbbl)'].dropna()      # Friday-only series\n\n# ---------- 1️⃣  Release-timed series -----------------------------------------\ndef next_wednesday(d):\n    \"\"\"Return the first Wednesday *after* date d.\"\"\"\n    offset = (2 - d.weekday() + 7) % 7        # 2 = Wed\n    if offset == 0:                       # already Wed → push to next week\n        offset = 7\n    return d + pd.Timedelta(days=offset)\n\n# move each Friday obs to the following Wednesday\nrelease_idx   = cush.index.map(next_wednesday)\ncush_release  = cush.copy()\ncush_release.index = release_idx\n\ndaily_df['Cushing Stocks (Release)'] = (\n    cush_release.reindex(daily_df.index)      # align to full Daily index\n               .ffill()                       # carry forward until next Wed\n)\n\n# ---------- 2️⃣  Interpolated physical series ---------------------------------\n#  • re-index to daily calendar, interpolate, then b/ffill book-ends\ncush_interp = (\n    cush.reindex(daily_df.index)              # Fridays + NaNs in between\n        .interpolate(method='time')           # linear in calendar time\n        .ffill()                              # carry last value forward\n        .bfill()                              # backfill before first obs\n)\ndaily_df['Cushing Stocks (Interp)'] = cush_interp\n\n# ───────────────────────────────────────────────────────────────────\n# OPTIONAL: also compute day-to-day deltas / momentum on the new cols\ndaily_df['Delta Cushing Release'] = daily_df['Cushing Stocks (Release)'].diff()\ndaily_df['Delta Cushing Interp']  = daily_df['Cushing Stocks (Interp)'].diff()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:44.469515Z","iopub.execute_input":"2025-04-29T18:52:44.469825Z","iopub.status.idle":"2025-04-29T18:52:44.497934Z","shell.execute_reply.started":"2025-04-29T18:52:44.469800Z","shell.execute_reply":"2025-04-29T18:52:44.497010Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"%pip install pandas_market_calendars","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:30:43.838916Z","iopub.execute_input":"2025-04-29T18:30:43.839279Z","iopub.status.idle":"2025-04-29T18:30:50.381401Z","shell.execute_reply.started":"2025-04-29T18:30:43.839252Z","shell.execute_reply":"2025-04-29T18:30:50.379851Z"}},"outputs":[{"name":"stdout","text":"Collecting pandas_market_calendars\n  Downloading pandas_market_calendars-5.1.0-py3-none-any.whl.metadata (9.6 kB)\nRequirement already satisfied: pandas>=1.1 in /usr/local/lib/python3.11/dist-packages (from pandas_market_calendars) (2.2.3)\nRequirement already satisfied: tzdata in /usr/local/lib/python3.11/dist-packages (from pandas_market_calendars) (2025.2)\nRequirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from pandas_market_calendars) (2.9.0.post0)\nCollecting exchange-calendars>=3.3 (from pandas_market_calendars)\n  Downloading exchange_calendars-4.10-py3-none-any.whl.metadata (37 kB)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from exchange-calendars>=3.3->pandas_market_calendars) (1.26.4)\nCollecting pyluach (from exchange-calendars>=3.3->pandas_market_calendars)\n  Downloading pyluach-2.2.0-py3-none-any.whl.metadata (4.3 kB)\nRequirement already satisfied: toolz in /usr/local/lib/python3.11/dist-packages (from exchange-calendars>=3.3->pandas_market_calendars) (1.0.0)\nCollecting korean_lunar_calendar (from exchange-calendars>=3.3->pandas_market_calendars)\n  Downloading korean_lunar_calendar-0.3.1-py3-none-any.whl.metadata (2.8 kB)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1->pandas_market_calendars) (2025.2)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil->pandas_market_calendars) (1.17.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->exchange-calendars>=3.3->pandas_market_calendars) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->exchange-calendars>=3.3->pandas_market_calendars) (2024.2.0)\nDownloading pandas_market_calendars-5.1.0-py3-none-any.whl (123 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m123.9/123.9 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading exchange_calendars-4.10-py3-none-any.whl (198 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m198.4/198.4 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading korean_lunar_calendar-0.3.1-py3-none-any.whl (9.0 kB)\nDownloading pyluach-2.2.0-py3-none-any.whl (25 kB)\nInstalling collected packages: korean_lunar_calendar, pyluach, exchange-calendars, pandas_market_calendars\nSuccessfully installed exchange-calendars-4.10 korean_lunar_calendar-0.3.1 pandas_market_calendars-5.1.0 pyluach-2.2.0\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"import pandas as pd\nimport pandas_market_calendars as mcal\n\n# ───────────────────────────────────────────────────────────\n\ndaily_df.reset_index(inplace=True)\n# 0) Basic set-up\ndaily_df['Date (Day)'] = pd.to_datetime(daily_df['Date (Day)'])\ndaily_df = daily_df.set_index('Date (Day)').sort_index()\n\nmeta = ['Prompt TM',\n        'Cushing Stocks (Mbbl)']                       # keep these as-is\n\nprice_cols = daily_df.columns.difference(meta)\n\n# ───────────────────────────────────────────────────────────\n# 1) Drop rows where the *front-month* is zero\ndaily_df = daily_df[daily_df['%CL 1!'] != 0]\n\n# ───────────────────────────────────────────────────────────\n# 2) Build an index that includes every DAY (weekends + holidays)\nfull_idx = pd.date_range(daily_df.index.min(),\n                         daily_df.index.max(),\n                         freq='D')\n\n# • If you prefer *only trading days*:\n# cal = mcal.get_calendar('NYMEX')\n# full_idx = cal.schedule(full_idx[0].date(), full_idx[-1].date()).index\n\ndaily_df = daily_df.reindex(full_idx)\n\n# ───────────────────────────────────────────────────────────\n# 3) Forward-fill *price_cols* only\ndaily_df[price_cols] = daily_df[price_cols].ffill()\n\n# Meta columns—fill as you wish (often ffill makes sense for Cushing stocks)\ndaily_df['Cushing Stocks (Mbbl)'] = daily_df['Cushing Stocks (Mbbl)'].ffill()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T18:52:52.334091Z","iopub.execute_input":"2025-04-29T18:52:52.334510Z","iopub.status.idle":"2025-04-29T18:52:52.374635Z","shell.execute_reply.started":"2025-04-29T18:52:52.334485Z","shell.execute_reply":"2025-04-29T18:52:52.373589Z"}},"outputs":[],"execution_count":20},{"cell_type":"markdown","source":"# WEEKLY EXAMINATION","metadata":{}},{"cell_type":"code","source":"import datetime\nfrom datetime import datetime\nimport statsmodels\nimport scipy\nimport matplotlib.pyplot\n\nfile_path = '/kaggle/input/spreadanalysis42920252/David WTI Spread Analysis.xlsx'\n\nweekly_sheet_name = 'Weekly Data'\n\nweekly_df = pd.read_excel(file_path, weekly_sheet_name, skiprows=5, header = 0, usecols = 'B:AH')\n\nimport re\nfrom itertools import combinations\n\n# --- 1. pick out the columns that look like \"%CL n!\"\ncl_weekly_cols = [c for c in weekly_df.columns if re.match(r'%CL \\d+!', c)]\n\n# --- 2. sort them numerically so CL 1! < CL 2! < … < CL 24!\ncl_weekly_cols = sorted(cl_weekly_cols, key=lambda c: int(re.search(r'\\d+', c).group()))\n\n# --- 3. build every (near, far) pair and write the spread\nfor near, far in combinations(cl_weekly_cols, 2):          # all pairs where near < far\n    spread_name = f'{near} - {far}'                 # e.g. \"%CL 1! - %CL 4!\"\n    weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n\nweekly_df.drop(columns = {'SBM Stocks (Mbbl)','%CL 1! - %CL 2!', \"CL Settles / Fwd Proj (M1-M2)\",\"CL Settles / Fwd Proj (M2-M8)\", \"Filter Range\",'Prompt TM'}, inplace=True)\n\nweekly_df['Prompt Spread'] = weekly_df['%CL 1!'] - weekly_df['%CL 2!']\n\nweekly_df['Dec Red'] = weekly_df['CL Z25'] - weekly_df['CL Z26']\n\n# ------------------------------------------------------------------\n# 1) columns that should NEVER be dropped\nmeta_cols = [\"Date (Week)\",\n             \"Cushing Stocks (Mbbl)\",\n             \"Prompt Spread\",\n             \"Dec Red\"]\n\n# ------------------------------------------------------------------\n# 2) helper → extract all month numbers embedded in a column name\nmonth_re = re.compile(r'%CL\\s+(\\d+)!')       # captures the digits after %CL\n\ndef months_in_col(col: str):\n    \"\"\"Return a list of ints for every %CL n! token in the column name.\"\"\"\n    return [int(m) for m in month_re.findall(col)]\n\n# ------------------------------------------------------------------\n# 3) build the drop list\ndrop_cols = []\n\nfor col in weekly_df.columns:\n    if col in meta_cols:                         # keep meta columns\n        continue\n\n    months = months_in_col(col)                  # outrights ⇒ [n], spreads ⇒ [n, m]\n\n    # drop if ANY leg is beyond the 12-month mark\n    if any(m > 12 for m in months):\n        drop_cols.append(col)\n\n# ------------------------------------------------------------------\n# 4) perform the drop\nweekly_df = weekly_df.drop(columns=drop_cols)\n\n# Optional sanity-check\nprint(f\"Dropped {len(drop_cols)} columns → {weekly_df.shape[1]} columns remain.\")\n\n\n# 1) sort by date so \"forward\" really is forward\nweekly_df['Date (Week)'] = pd.to_datetime(weekly_df['Date (Week)'])\nweekly_df = weekly_df.sort_values('Date (Week)')\n\n# 2) pick everything except the index column\nfill_cols = weekly_df.columns.difference(['Date (Week)'])\n\n# 3) forward-fill *per column*\nweekly_df[fill_cols] = weekly_df[fill_cols].ffill()\n\nprint(weekly_df.head(30))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T19:44:24.548534Z","iopub.execute_input":"2025-04-29T19:44:24.548824Z","iopub.status.idle":"2025-04-29T19:44:25.058645Z","shell.execute_reply.started":"2025-04-29T19:44:24.548804Z","shell.execute_reply":"2025-04-29T19:44:25.057689Z"}},"outputs":[{"name":"stdout","text":"Dropped 222 columns → 83 columns remain.\n   Date (Week)  Cushing Stocks (Mbbl)  %CL 1!  %CL 2!  %CL 3!  %CL 4!  %CL 5!  \\\n0   2018-01-05                46578.0   61.44   61.41   61.30   61.15   60.93   \n1   2018-01-12                42394.0   64.30   64.23   64.03   63.77   63.44   \n2   2018-01-19                39244.0   63.37   63.31   63.16   62.96   62.68   \n3   2018-01-26                37020.0   66.14   65.97   65.67   65.26   64.76   \n4   2018-02-02                36309.0   65.45   65.07   64.61   64.11   63.55   \n5   2018-02-09                32667.0   59.20   58.99   58.67   58.32   57.90   \n6   2018-02-16                30003.0   61.68   61.55   61.20   60.73   60.19   \n7   2018-02-23                28785.0   63.55   63.41   63.10   62.67   62.16   \n8   2018-03-02                28180.0   61.25   61.09   60.78   60.36   59.87   \n9   2018-03-09                28518.0   62.04   61.92   61.69   61.33   60.89   \n10  2018-03-16                29423.0   62.34   62.41   62.25   61.94   61.49   \n11  2018-03-23                31227.0   65.88   65.71   65.29   64.74   64.16   \n12  2018-03-30                34893.0    0.00    0.00    0.00    0.00    0.00   \n13  2018-04-06                36022.0   62.06   62.10   61.96   61.64   61.26   \n14  2018-04-13                34907.0   67.39   67.33   67.00   66.45   65.85   \n15  2018-04-20                35366.0   68.38   68.40   68.18   67.66   67.05   \n16  2018-04-27                35782.0   68.10   67.98   67.63   67.10   66.52   \n17  2018-05-04                37170.0   69.72   69.58   69.16   68.62   68.05   \n18  2018-05-11                37223.0   70.70   70.68   70.47   70.09   69.66   \n19  2018-05-18                36100.0   71.28   71.37   71.11   70.62   70.08   \n20  2018-05-25                35544.0   67.88   67.78   67.45   67.06   66.72   \n21  2018-06-01                34589.0   65.81   65.77   65.53   65.23   65.01   \n22  2018-06-08                33902.0   65.74   65.67   65.40   65.06   64.91   \n23  2018-06-15                32606.0   65.06   64.85   64.40   63.94   63.74   \n24  2018-06-22                29893.0   68.58   67.63   66.79   66.34   65.96   \n25  2018-06-29                27780.0   74.15   72.46   70.92   70.16   69.49   \n26  2018-07-06                25718.0   73.80   71.57   69.14   68.50   68.04   \n27  2018-07-13                24858.0   71.01   69.95   68.55   68.01   67.58   \n28  2018-07-20                23731.0   70.46   68.26   66.64   66.18   65.87   \n29  2018-07-27                22393.0   68.69   67.73   67.36   67.04   66.78   \n\n    %CL 6!  %CL 7!  %CL 8!  ...  %CL 8! - %CL 11!  %CL 8! - %CL 12!  \\\n0    60.62   60.27   59.93  ...              1.00              1.32   \n1    63.05   62.61   62.17  ...              1.28              1.67   \n2    62.33   61.93   61.53  ...              1.12              1.48   \n3    64.20   63.65   63.12  ...              1.46              1.97   \n4    62.95   62.35   61.77  ...              1.53              2.04   \n5    57.45   56.99   56.57  ...              1.14              1.51   \n6    59.63   59.09   58.58  ...              1.26              1.66   \n7    61.61   61.06   60.56  ...              1.30              1.70   \n8    59.36   58.87   58.43  ...              1.14              1.50   \n9    60.42   59.95   59.52  ...              1.19              1.57   \n10   61.03   60.55   60.11  ...              1.23              1.64   \n11   63.56   63.01   62.51  ...              1.55              2.01   \n12    0.00    0.00    0.00  ...              0.00              0.00   \n13   60.87   60.50   60.14  ...              1.14              1.50   \n14   65.23   64.67   64.13  ...              1.71              2.27   \n15   66.43   65.85   65.28  ...              1.73              2.30   \n16   65.97   65.43   64.89  ...              1.85              2.44   \n17   67.52   67.01   66.48  ...              1.81              2.39   \n18   69.24   68.81   68.37  ...              1.76              2.34   \n19   69.57   69.11   68.66  ...              1.62              2.12   \n20   66.36   66.01   65.58  ...              1.35              1.76   \n21   64.78   64.56   64.24  ...              0.97              1.27   \n22   64.73   64.52   64.25  ...              0.86              1.16   \n23   63.52   63.29   63.00  ...              0.89              1.16   \n24   65.56   65.10   64.66  ...              1.13              1.50   \n25   68.85   68.17   67.56  ...              1.47              1.97   \n26   67.62   67.14   66.71  ...              1.12              1.52   \n27   67.15   66.62   66.15  ...              1.08              1.46   \n28   65.57   65.17   64.79  ...              0.98              1.31   \n29   66.37   66.02   65.72  ...              0.84              1.13   \n\n    %CL 9! - %CL 10!  %CL 9! - %CL 11!  %CL 9! - %CL 12!  %CL 10! - %CL 11!  \\\n0               0.34              0.65              0.97               0.31   \n1               0.43              0.84              1.23               0.41   \n2               0.37              0.73              1.09               0.36   \n3               0.47              0.95              1.46               0.48   \n4               0.51              1.00              1.51               0.49   \n5               0.37              0.74              1.11               0.37   \n6               0.41              0.81              1.21               0.40   \n7               0.43              0.87              1.27               0.44   \n8               0.38              0.75              1.11               0.37   \n9               0.40              0.80              1.18               0.40   \n10              0.40              0.82              1.23               0.42   \n11              0.53              1.03              1.49               0.50   \n12              0.00              0.00              0.00               0.00   \n13              0.40              0.78              1.14               0.38   \n14              0.59              1.17              1.73               0.58   \n15              0.61              1.18              1.75               0.57   \n16              0.62              1.22              1.81               0.60   \n17              0.61              1.20              1.78               0.59   \n18              0.61              1.21              1.79               0.60   \n19              0.54              1.07              1.57               0.53   \n20              0.45              0.88              1.29               0.43   \n21              0.32              0.65              0.95               0.33   \n22              0.29              0.58              0.88               0.29   \n23              0.30              0.59              0.86               0.29   \n24              0.38              0.74              1.11               0.36   \n25              0.49              0.93              1.43               0.44   \n26              0.36              0.71              1.11               0.35   \n27              0.36              0.69              1.07               0.33   \n28              0.32              0.63              0.96               0.31   \n29              0.26              0.57              0.86               0.31   \n\n    %CL 10! - %CL 12!  %CL 11! - %CL 12!  Prompt Spread  Dec Red  \n0                0.63               0.32           0.03    -0.40  \n1                0.80               0.39           0.07    -0.40  \n2                0.72               0.36           0.06    -0.40  \n3                0.99               0.51           0.17    -0.40  \n4                1.00               0.51           0.38    -0.40  \n5                0.74               0.37           0.21    -0.40  \n6                0.80               0.40           0.13    -0.45  \n7                0.84               0.40           0.14    -0.45  \n8                0.73               0.36           0.16    -0.45  \n9                0.78               0.38           0.12    -0.45  \n10               0.83               0.41          -0.07    -0.45  \n11               0.96               0.46           0.17    -0.45  \n12               0.00               0.00           0.00     0.00  \n13               0.74               0.36          -0.04    -0.45  \n14               1.14               0.56           0.06    -0.45  \n15               1.14               0.57          -0.02    -0.45  \n16               1.19               0.59           0.12    -0.45  \n17               1.17               0.58           0.14    -0.45  \n18               1.18               0.58           0.02    -0.45  \n19               1.03               0.50          -0.09    -0.45  \n20               0.84               0.41           0.10    -0.45  \n21               0.63               0.30           0.04    -0.45  \n22               0.59               0.30           0.07    -0.44  \n23               0.56               0.27           0.21    -0.19  \n24               0.73               0.37           0.95    -0.19  \n25               0.94               0.50           1.69    -0.19  \n26               0.75               0.40           2.23    -0.19  \n27               0.71               0.38           1.06    -0.19  \n28               0.64               0.33           2.20    -0.19  \n29               0.60               0.29           0.96    -0.19  \n\n[30 rows x 83 columns]\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:25: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df[spread_name] = weekly_df[near] - weekly_df[far]\n/tmp/ipykernel_31/665589665.py:29: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df['Prompt Spread'] = weekly_df['%CL 1!'] - weekly_df['%CL 2!']\n/tmp/ipykernel_31/665589665.py:31: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  weekly_df['Dec Red'] = weekly_df['CL Z25'] - weekly_df['CL Z26']\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}